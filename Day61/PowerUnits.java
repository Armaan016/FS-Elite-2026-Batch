package Day61;

// You are the lead engineer in a high-tech robot factory with 'n production units', 
// each assigned a number from 0 to n - 1. Every unit contains a specialized 
// 'robot component', and the efficiency level of each component is represented by 
// an array components, where components[i] is the efficiency level of the i-th component.

// As part of the factory shutdown protocol, you need to deactivate all the units 
// one by one. However, the deactivation process is tricky — when you shut down the 
// i-th unit, it triggers a chain reaction with its neighboring units, generating:

//     components[i - 1] * components[i] * components[i + 1] power units

// If i - 1 or i + 1 falls outside the range of the array, assume there’s a dummy 
// component with efficiency level 1 installed for safety compliance.

// Your objective is to maximize the total power generated by planning the shutdown
// order strategically.

// Example 1:
// Input=
// 2 1 3 5
// output=
// 51

// Explanation:
// Shutdown order:
// [2,1,3,5] → [2,3,5] → [2,5] → [5] → []
// Power generated:
// 2*1*3 + 2*3*5 + 1*2*5 + 1*5*1 = 51

// Example 2:
// Input= 
// 8 9
// Output=
// 81

// Explanation:
// Deactivate both units in any order: 1*8*9 + 1*9*1 = 81

// Constraints:

// -> n == components.length
// -> 1 <= n <= 300
// -> 0 <= components[i] <= 100

import java.util.*;

public class PowerUnits {   
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] components = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        System.out.println(findMaxPower(components));
        sc.close();
    }

    private static int findMaxPower(int[] components) {
        int n = components.length;

        int[] nums = new int[n + 2];
        nums[0] = 1;
        nums[n + 1] = 1;
        for (int i = 0; i < n; i++)
            nums[i + 1] = components[i];

        int[][] dp = new int[n + 2][n + 2];
        for (int[] row : dp)
            Arrays.fill(row, -1);

        return memo(nums, 1, n, dp);
    }

    private static int memo(int[] nums, int l, int r, int[][] dp) {
        if (l > r)
            return 0;

        if (dp[l][r] != -1)
            return dp[l][r];

        int res = 0;
        for (int i = l; i <= r; i++) {
            res = Math.max(res,
                    nums[l - 1] * nums[i] * nums[r + 1] + memo(nums, l, i - 1, dp) + memo(nums, i + 1, r, dp));
        }

        return dp[l][r] = res;
    }
}